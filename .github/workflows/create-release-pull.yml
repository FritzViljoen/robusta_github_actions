name: Create Release Pull

on:
  workflow_dispatch:
    inputs:
      target_branch:
        type: choice
        description: "target branch"
        options:
          - next-eu
          - staging-na
          - prod-na
          - prod-eu
      version_bump:
        type: choice
        description: "version bump"
        options:
          - default
          - minor
          - major
          - hotfix1
          - hotfix2
          - hotfix3
          - dryrun
      slack_channel:
        type: string
        description: "slack channel name or id"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      prerelease_branches: (next-eu, staging-na)
      target_branch: ${{ github.event.inputs.target_branch }}
      version_bump: ${{ github.event.inputs.version_bump }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Set source branch
        run: |
          case ${{ env.target_branch }} in
            next-eu)    echo "source_branch=edge" >> $GITHUB_ENV;;
            staging-na) echo "source_branch=next-eu" >> $GITHUB_ENV;;
            *)          echo "source_branch=staging-na" >> $GITHUB_ENV;;
          esac


#      - name: Post to a slack channel
#        uses: slackapi/slack-github-action@v1.16.0
#        with:
#          channel-id: ${{ github.event.inputs.slack_channel }}
#          slack-message: 'github-actions: Creating a ${{ env.version_bump }} pull-request from ${{ env.source_branch }} to ${{ env.target_branch }}!'
#        env:
#          SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}


      - name: Create tag
        id: create_tag
        run: |
          # config
          pre_release=${{ contains( env.prerelease_branches, env.target_branch ) }}
          case ${{ env.target_branch }} in
            staging-na) suffix=.staging ;;
            prod-na)    suffix=.prod-na ;;
            prod-eu)    suffix=.prod-eu ;;
          esac

          # get latest tag
          tag=$(git for-each-ref --sort=-v:refname --format '%(refname:lstrip=2)' | grep -E "^v?[0-9]+\.[0-9]?" | head -n1)
          regex="v([0-9]+).([0-9]+)?"
          if [[ $tag =~ $regex ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
          fi
          echo found Tag $tag

          # bump version
          case ${{ env.version_bump }} in
            major)
              major=$(echo $major + 1 | bc);
              minor="1";
              new="$major.$minor"
            ;;
            minor)
              minor=$(echo $minor + 1 | bc);
              new="$major.$minor"
            ;;
            hotfix*)
              hotfix_version=$(echo ${{ env.version_bump }} | grep -Eo '[0-9]+$')
              tag=$(git for-each-ref --sort=-v:refname --format '%(refname:lstrip=2)' | grep -E "^v?[0-9]+\.[0-9].prod-na?" | head -n1)
              if [[ $tag =~ "v([0-9]+).([0-9]+).prod-na?" ]]; then
                major="${BASH_REMATCH[1]}"
                minor="${BASH_REMATCH[2]}"
              fi
              new="$major.$minor.$hotfix_version"
            ;;
            default)
              new="$major.$minor"
            ;;
            dryrun)
              new="$major.$minor"
            ;;
          esac

          echo "Pre-release = $pre_release"
          if $pre_release
          then
            if [[ ${{ env.version_bump }} == hotfix* ]];
            then
              pre_tag=$(git for-each-ref --sort=-v:refname --format '%(refname:lstrip=2)' | grep -E "^v?[0-9]+\.[0-9]+\.[0-9]+(.rc[0-9]+)$suffix$" | head -n1)
              regex="v([0-9]+).([0-9]+).([0-9]+)(.rc([0-9]+)$suffix)"
              if [[ $pre_tag =~ $regex ]]; then
                build="${BASH_REMATCH[5]}"
              fi
            else
              pre_tag=$(git for-each-ref --sort=-v:refname --format '%(refname:lstrip=2)' | grep -E "^v?[0-9]+\.[0-9]+(.rc[0-9]+)$suffix$" | head -n1)
              regex="v([0-9]+).([0-9]+)(.rc([0-9]+)$suffix)"
              if [[ $pre_tag =~ $regex ]]; then
                build="${BASH_REMATCH[4]}"
              fi
            fi
            echo found Pre-release Tag $pre_tag

            # Already a prerelease available, bump it
            if [[ "$pre_tag" == *"$new"* ]]
            then
              build=$(echo $build + 1 | bc);
            else
              build="1";
            fi
            new="$new.rc$build$suffix"
          else
            new="$new$suffix"
          fi

          # prefix with 'v'
          new="v$new"

          # set outputs
          echo ::set-output name=new_tag::$new


      - name: Compile pull request
        id: compile_pr
        run: |
          output=$(ruby ./script/create-github-pr ${{ env.target_branch }} ${{ env.source_branch }})
          output="${output//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo "::set-output name=pr_body::$output"


#      - name: Post PR Body to a slack channel
#        uses: slackapi/slack-github-action@v1.16.0
#        with:
#          channel-id: ${{ github.event.inputs.slack_channel }}
#          slack-message: "*${{ steps.create_tag.outputs.new_tag }} | Release [${{ env.target_branch }}]* \n
#           ${{ steps.compile_pr.outputs.pr_body }}"
#        env:
#          SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}


      - name: Create pull request
        if: ${{ !contains(github.event.inputs.version_bump, 'dryrun') }}
        id: create_pr
        uses: devops-infra/action-pull-request@v0.4.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          title: ${{ steps.create_tag.outputs.new_tag }} | Release [${{ env.target_branch }}]
          body: ${{ steps.compile_pr.outputs.pr_body }}
          source_branch: ${{ env.source_branch }}
          target_branch: ${{ env.target_branch }}


      - name: Comparing branches by revisions
        id: compare
        run: |
          echo -e "\nComparing branches by diff..."
          if [[ -z $(git diff "origin/${{ env.target_branch }}...origin/${{ env.source_branch }}") ]]; then
            echo "::set-output name=message::[INFO] Both branches are the same. No action needed."
          fi


      - name: Post Error to a slack channel
        uses: slackapi/slack-github-action@v1.16.0
        if: ${{ !contains(steps.create_pr.outputs.url, 'github') }}
        with:
          channel-id: ${{ github.event.inputs.slack_channel }}
          slack-message: "github-actions: *:skull_and_crossbones:Pull request not created!!!:skull_and_crossbones:* \n
          ${{ steps.compare.outputs.message }} \n
          https://github.com/${{ github.repository }}/actions"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}


      - name: Post Success to a slack channel
        uses: slackapi/slack-github-action@v1.16.0
        if: ${{ contains(steps.create_pr.outputs.url, 'github') }}
        with:
          channel-id: ${{ github.event.inputs.slack_channel }}
          slack-message: "*github-actions: Pull request created.*\n
          ${{ steps.create_pr.outputs.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}
